<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Brian Scaturro</title>
 <link href="http://brianscaturro.com/atom.xml" rel="self"/>
 <link href="http://brianscaturro.com/"/>
 <updated>2012-10-14T19:16:03+02:00</updated>
 <id>http://brianscaturro.com/</id>
 <author>
   <name>Brian Scaturro</name>
   <email>scaturrob@gmail.com</email>
 </author>

 
 <entry>
   <title>Monomials and Polynomials With Scala and ScalaTest</title>
   <link href="http://brianscaturro.com/2012/09/17/monomials-polynomials-with-scala.html"/>
   <updated>2012-09-17T00:00:00+02:00</updated>
   <id>http://brianscaturro.com.com/2012/09/17/monomials-polynomials-with-scala</id>
   <content type="html">&lt;p&gt;Onward and upward in the algebra-verse. It is time for me to review the application of monomials and polynomials using Scala and ScalaTest.&lt;/p&gt;

&lt;p&gt;You can checkout the &lt;a href='https://github.com/brianium/scala-algebra'&gt;repo&lt;/a&gt; on Github.&lt;/p&gt;

&lt;h2 id='monomials_and_polynomials'&gt;Monomials and Polynomials&lt;/h2&gt;

&lt;p&gt;It might be helpful to begin with some definitions. A monomial can be defined as the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A monomial is an algebraic expression consisting of one term&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This would be something like &lt;code&gt;ak&lt;/code&gt; or &lt;code&gt;kmn/2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A polynomial can be defined like so:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A polynomial is an algebraic expression consisting of several terms&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can demonstrate this with something like the following: &lt;code&gt;ak + kmn/2 - x ^ 2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Likewise there are binomials for two-term expressions, and trinomials for three-term expressions.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='adding_polynomials'&gt;Adding Polynomials&lt;/h2&gt;

&lt;p&gt;Polynomials can be added by following a couple steps. These steps usually involve removing parentheses, grouping like terms, and simplifying. We can assert this process in ScalaTest like so:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;After simplifying we have the much leaner expression 2x&lt;sup&gt;2&lt;/sup&gt; + 7x - 3&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='subtracting_polynomials'&gt;Subtracting Polynomials&lt;/h2&gt;

&lt;p&gt;Subtracting polynomials follow similar rules to addition, with one caveat. The subtrahend - that is the expression being subtracted - must be taken as it&amp;#8217;s additive inverse. That means (6a - b + 2) - (2a + 3b - 4) becomes 6a - b + 2 - 2a - 3b + 4. Notice everything in the subtrahend becomes it&amp;#8217;s opposite.&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='multiplying_polynomials_and_monomials'&gt;Multiplying Polynomials And Monomials&lt;/h2&gt;

&lt;p&gt;There are a couple of different rules to consider when doing multiplication of monomials and polynomials. We will look at several of these.&lt;/p&gt;

&lt;h3 id='monomials_with_exponents'&gt;Monomials with exponents&lt;/h3&gt;

&lt;p&gt;It is pretty easy to multiply monomials with exponents when they have a common base. If you have x&lt;sup&gt;3&lt;/sup&gt; * x&lt;sup&gt;4&lt;/sup&gt; you have (x * x * x) * (x * x * x * x) or xxxxxxx or x&lt;sup&gt;7&lt;/sup&gt;. Hence x&lt;sup&gt;y&lt;/sup&gt; * x&lt;sup&gt;z&lt;/sup&gt; = x&lt;sup&gt;y + z&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h3 id='raising_exponents_to_a_given_power'&gt;Raising exponents to a given power&lt;/h3&gt;

&lt;p&gt;What about when we need to raise a base that already contains an exponent. This is the situation with something like (x&lt;sup&gt;3&lt;/sup&gt;)&lt;sup&gt;3&lt;/sup&gt;. This can be read as x&lt;sup&gt;3&lt;/sup&gt; * x&lt;sup&gt;3&lt;/sup&gt; * x&lt;sup&gt;3&lt;/sup&gt; or xxxxxxxxx or x&lt;sup&gt;9&lt;/sup&gt;. This gives us (x&lt;sup&gt;y&lt;/sup&gt;)&lt;sup&gt;z&lt;/sup&gt; = x&lt;sup&gt;y * z&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h3 id='multiplying_polynomials_by_monomials'&gt;Multiplying polynomials by monomials&lt;/h3&gt;

&lt;p&gt;To multiply a polynomial by a monomial, we just need to distribute the monomial throughout the polynomial. We can demonstrate this in ScalaTest like so:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;Keep an eye on the value for b. It has been converted to a floating point number, because if we had not done this, then 4/3 would have resulted in 1 for our &lt;code&gt;solution&lt;/code&gt; value. This would drastically alter the results of our calculation.&lt;/p&gt;

&lt;h3 id='multiplying_multiple_polynomials'&gt;Multiplying multiple polynomials&lt;/h3&gt;

&lt;p&gt;When multiplying two polynomials, it can be helpful to stack them vertically. Consider the following:&lt;/p&gt;

&lt;p&gt;-2x&lt;sup&gt;2&lt;/sup&gt; + y&lt;sup&gt;2&lt;/sup&gt; + xy&lt;br /&gt;* x - y&lt;/p&gt;

&lt;p&gt;The key is to move left to right, first multiplying each term on top against the term on the bottom left. Then do the same for the term on the bottom right. Then just group like terms and simplify.&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='dividing_polynomials_and_monomials'&gt;Dividing Polynomials and Monomials&lt;/h2&gt;

&lt;p&gt;It should be no surprise that division follows similar rules to multiplication.&lt;/p&gt;

&lt;h3 id='monomials_with_exponents'&gt;Monomials with exponents&lt;/h3&gt;

&lt;p&gt;Like multiplication, dividing monomials containing exponents is simple if they have a common base. Given a&lt;sup&gt;8&lt;/sup&gt; / a&lt;sup&gt;5&lt;/sup&gt;, we have aaaaaaaa / aaaaa. You will get a 1 for every value in the denominator if the numerator&amp;#8217;s exponent is greater. This effectively cancels all the bases in the denominator, leaving us with what is left in the numerator: aaa. Therefore, a&lt;sup&gt;x&lt;/sup&gt; / a&lt;sup&gt;y&lt;/sup&gt; = a&lt;sup&gt;x - y&lt;/sup&gt;, where x is greater than y.&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;We follow a slightly different rule if the exponent in the denominator is larger. a&lt;sup&gt;x&lt;/sup&gt; / a&lt;sup&gt;y&lt;/sup&gt; = 1/a&lt;sup&gt;y -x&lt;/sup&gt; where y is greater than x.&lt;/p&gt;

&lt;h3 id='dividing_polynomials_by_monomials'&gt;Dividing polynomials by monomials&lt;/h3&gt;

&lt;p&gt;This knowledge of dividing exponents comes in handy when dividing polynomials by monomials. Hopefully this example in Scala demonstrates why:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;As usual, I have left out some tests. Be sure to checkout the whole test suite on Github&lt;/p&gt;
&lt;a class='button' href='https://github.com/brianium/scala-algebra/blob/master/src/test/scala/com/brianscaturro/MonomialsAndPolynomialsSuite.scala' target='_blank'&gt;The Source&lt;/a&gt;</content>
 </entry>
 
 <entry>
   <title>Dipping Into The Number System With Scala and ScalaTest</title>
   <link href="http://brianscaturro.com/2012/09/06/number-system-with-scala.html"/>
   <updated>2012-09-06T00:00:00+02:00</updated>
   <id>http://brianscaturro.com.com/2012/09/06/number-system-with-scala</id>
   <content type="html">&lt;p&gt;My math quest continues as I open up the number system as part of my algebra adventure.&lt;/p&gt;

&lt;p&gt;To re-cap, I am exploring these fundamental truths with &lt;a href='http://www.scala-lang.org/'&gt;Scala&lt;/a&gt; and &lt;a href='http://www.scalatest.org/'&gt;ScalaTest&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can checkout the &lt;a href='https://github.com/brianium/scala-algebra'&gt;repo&lt;/a&gt; on Github.&lt;/p&gt;

&lt;h2 id='exploring_the_number_system_with_scala'&gt;Exploring The Number System With Scala&lt;/h2&gt;

&lt;p&gt;The real number system is made up of irrational numbers, rational numbers, fractions, and integers.&lt;/p&gt;

&lt;p&gt;The main focus of this exploration with Scala is the set of rational numbers. This includes fractions and integers ( which in turn is composed of negative and positive integers as well as 0).&lt;/p&gt;

&lt;p&gt;There will be a lot of talk about signs of quality (whether or not a number is postive or negative), and how to add, subtract, multiply and divide signed numbers.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='testing_addition_with_signed_numbers'&gt;Testing Addition With Signed Numbers&lt;/h2&gt;

&lt;p&gt;For a review of setting up a test class, go &lt;a href='http://brianscaturro.com/2012/09/03/algebra-basics-with-scala.html#setting_up_the_tests'&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our first rule of addition:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To add two numbers having opposite signs, find the difference of their absolute values and prefix the sign of the number having the larger absolute value&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Timeout for absolute values!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An absolute value is a number&amp;#8217;s distance from 0, ignoring the sign. So the absolute value of -27 is 27, as it is 27 numbers away from 0. The absolute value of 27 is also 27, as it is 27 numbers away from 0.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s check this rule out in Scala:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;Easy weasy. As you can see, &lt;code&gt;abs&lt;/code&gt; is used to get the absolute value of a number. What about adding numbers of the same sign?&lt;/p&gt;

&lt;p&gt;Our second rule of addition:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To add two signed numbers that have like signs, add their absolute values and prefix their common sign.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And in Scala:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;The proof is in the passing test!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='testing_subtraction_with_signed_numbers'&gt;Testing Subtraction With Signed Numbers&lt;/h2&gt;

&lt;p&gt;This rule is super simple.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To subtract a number, add its opposite&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let&amp;#8217;s see it in action:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;We can combine signed integers when applying this rule to problems with multiple values:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='testing_multplication_with_signed_numbers'&gt;Testing Multplication With Signed Numbers&lt;/h2&gt;

&lt;p&gt;Multiplication rule one:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When multiplying two signed numbers, if the signs are the same, the product will be positive&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;And rule two:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When multiplying two signed numbers, if the signs of the numbers are different, the product will be negative&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;And the third rule:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Regardless of the number of factors, the product of more than two numbers is always negative if there are an odd number of negative factors, and positive if there are an even number of negative factors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;And with an odd number of negative factors:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;These same rules apply to exponents and division as well. You can see more examples of this on &lt;a href='https://github.com/brianium/scala-algebra/blob/master/src/test/scala/com/brianscaturro/NumberSystemSuite.scala'&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='evaluating_expressions_with_signed_numbers'&gt;Evaluating Expressions With Signed Numbers&lt;/h2&gt;

&lt;p&gt;All the rules so far apply to expressions where substitution is necessary. It helps to replace the variables in an expression with the supplied variables in parentheses.&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;There are some tests left out here, but you can view the whole test suite on Github.&lt;/p&gt;
&lt;a class='button' href='https://github.com/brianium/scala-algebra/blob/master/src/test/scala/com/brianscaturro/NumberSystemSuite.scala' target='_blank'&gt;The Source&lt;/a&gt;</content>
 </entry>
 
 <entry>
   <title>Algebra Basics With Scala and ScalaTest</title>
   <link href="http://brianscaturro.com/2012/09/03/algebra-basics-with-scala.html"/>
   <updated>2012-09-03T00:00:00+02:00</updated>
   <id>http://brianscaturro.com.com/2012/09/03/algebra-basics-with-scala</id>
   <content type="html">&lt;p&gt;I am on a quest. A quest to train my math powers. I am surprised by how much a programmer can get away with without using math (at least directly).&lt;/p&gt;

&lt;p&gt;Programmers are problem solvers, and nothing benefits acuity of mind like math does. I ran the calc and stats gauntlet not too long ago at college, but I know I could stand to stay sharp, and gaining some mastery along the way wouldn&amp;#8217;t hurt.&lt;/p&gt;

&lt;h2 id='scala_as_my_excalibur'&gt;Scala As My Excalibur&lt;/h2&gt;

&lt;p&gt;&lt;a href='http://www.scala-lang.org/'&gt;Scala&lt;/a&gt; is a pretty boss language on the JVM, and &lt;a href='http://www.scalatest.org/'&gt;ScalaTest&lt;/a&gt; is a pretty boss testing tool for Scala.&lt;/p&gt;

&lt;p&gt;To keep things a bit more exciting as I revisit the basics, I thought it might be fun to run these tests via ScalaTest. I&amp;#8217;ll be updating this &lt;a href='https://github.com/brianium/scala-algebra'&gt;repo&lt;/a&gt; on Github as I progress.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='setting_up_the_tests'&gt;Setting Up The Tests&lt;/h2&gt;

&lt;p&gt;This project follows a conventional structure for Scala projects and uses &lt;a href='https://github.com/harrah/xsbt/wiki/'&gt;sbt&lt;/a&gt; to manage the build process. Just about everything can be found in the src/test/scala/com/brianscaturro directory&lt;/p&gt;

&lt;h3 id='the_test_class'&gt;The test class&lt;/h3&gt;

&lt;p&gt;ScalaTest supports different styles of testing. I chose the more traditional style supported by the &lt;code&gt;FunSuite&lt;/code&gt; trait:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;As you can see, this first test is intended to cover algebra basics. It only requires that we import the ScalaTest library, and the scala.math package.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='testing_division_by_zero'&gt;Testing Division By Zero&lt;/h2&gt;

&lt;p&gt;Any student of math will tell you that dividing by zero is pure insanity. It is unpossible and imthinkable. Java uses an &lt;code&gt;ArithmeticException&lt;/code&gt; when this black art is attempted. Scala uses that same exception:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;ScalaTest provides that nice little intercept method to test for an exception of a given type. Here we test a scenario where an evaluated expression would result in division by zero.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='testing_simplification_of_problems'&gt;Testing Simplification Of Problems&lt;/h2&gt;

&lt;p&gt;A routine algebra drill is the grouping of like terms. I ran these tests by calculating the &amp;#8220;long&amp;#8221; version and the &amp;#8220;short&amp;#8221; version. I then asserted that they were equal.&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;This test gave me an excuse to showcase scala.math&amp;#8217;s &lt;code&gt;pow&lt;/code&gt; function, as well as practice this classic algebra tactic.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='running_the_tests'&gt;Running The Tests&lt;/h2&gt;

&lt;p&gt;sbt is pretty wizard, and it makes running tests a snap. All the dependencies are resolved as part of the build process, so running the tests is as easy as changing your working directory to the project directory and running the following (provided you have sbt installed):&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;This will make sure any dependencies are installed, the code is compiled, and that the tests are run.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I omitted some tests here, but you can check out the full source for the basics on Github.&lt;/p&gt;
&lt;a class='button' href='https://github.com/brianium/scala-algebra/blob/master/src/test/scala/com/brianscaturro/BasicsSuite.scala' target='_blank'&gt;The Source&lt;/a&gt;</content>
 </entry>
 
 <entry>
   <title>Blogging With Jekyll And Github Pages</title>
   <link href="http://brianscaturro.com/2012/06/12/blog-with-jekyll-and-github.html"/>
   <updated>2012-06-12T00:00:00+02:00</updated>
   <id>http://brianscaturro.com.com/2012/06/12/blog-with-jekyll-and-github</id>
   <content type="html">&lt;p&gt;WordPress is a great platform, but there is just too much junk in the trunk for me. I don&amp;#8217;t really have a need to take advantage of the beast that is TinyMCE, and I don&amp;#8217;t really need all the fancy plugins. I wanted to trim some of the fat.&lt;/p&gt;

&lt;p&gt;I decided to go the route many developers seem to be taking these days. Github pages and Jekyll. I shall guide you through the very journey I took!&lt;/p&gt;

&lt;h2 id='what_is_jekyll'&gt;What Is Jekyll?&lt;/h2&gt;

&lt;p&gt;Who can say it better than the creators of Jekyll? According to the &lt;a href='https://github.com/mojombo/jekyll/wiki' target='_blank'&gt;wiki&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Jekyll is a simple, blog aware, static site generator. It takes a template directory (representing the raw form of a website), runs it through Textile or Markdown and Liquid converters, and spits out a complete, static website suitable for serving with Apache or your favorite web server.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2 id='installing_jekyll'&gt;Installing Jekyll&lt;/h2&gt;

&lt;p&gt;Jekyll is installed as a ruby gem. To install Jekyll and all of its dependencies, do so via a terminal:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='the_jeykll_directory_structure'&gt;The Jeykll Directory Structure&lt;/h2&gt;

&lt;h3 id='the_project_folder'&gt;The Project Folder&lt;/h3&gt;

&lt;p&gt;Since we are using our Jekyll powered blog on Github, we will need to make sure our directory follows a convention. The convention for a Github page is yourusername.github.com.&lt;/p&gt;

&lt;p&gt;So for my blog, I created a project directory like so:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h3 id='_includes'&gt;_includes&lt;/h3&gt;

&lt;p&gt;The _includes directory is where we store reusable components. A resuable component is anything you would want repeated across pages or layouts. I used this directory to store things like header, footer, and sidebar templates.&lt;/p&gt;

&lt;h3 id='_layouts'&gt;_layouts&lt;/h3&gt;

&lt;p&gt;The _layouts directory is the place to store layouts. You can specify the layout for a given page, post, or even another layout by using the YAML front matter syntax:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h3 id='_posts'&gt;_posts&lt;/h3&gt;

&lt;p&gt;And now a surprising revelation! The _posts directory stores posts! This is where you will add all of your brilliant brain dumps and discoveries.&lt;/p&gt;

&lt;h3 id='_site'&gt;_site&lt;/h3&gt;

&lt;p&gt;The _site folder will be created for you as a result of compiling your Jekyll blog. This is the &amp;#8220;public&amp;#8221; directory of your site. Every request will be served from this directory.&lt;/p&gt;

&lt;h3 id='css_js_images_etc'&gt;css, js, images, etc..&lt;/h3&gt;

&lt;p&gt;You can create any directory you want inside of the project folder. Any directory added this way will be added to the _site directory at compile time.&lt;/p&gt;

&lt;p&gt;I used this feature to create directories for css, js, images, demos, and downloads.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='the__configyml_file'&gt;The _config.yml File&lt;/h2&gt;

&lt;p&gt;The _config.yml file is used to store configuration and site-wide variables. At the very least it should store the server port you will use for local testing and the permalink structure:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;If you were to add your own variable, say &lt;code&gt;site_title&lt;/code&gt;, it can be accessed in your posts, pages, and layouts like so:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp * * *&lt;/p&gt;

&lt;h2 id='creating_layouts'&gt;Creating Layouts&lt;/h2&gt;

&lt;p&gt;Layouts give structure to your content. They live in the _layouts directory.&lt;/p&gt;

&lt;p&gt;You can specify which layout to use in your various posts, pages, and even other layouts with the YAML front matter. If you want to use the post layout on a post, you would start your post file off like so:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;Now for a couple of wisdom bits to get you started.&lt;/p&gt;

&lt;h3 id='break_up_common_elements_with_includes'&gt;Break Up Common Elements With Includes&lt;/h3&gt;

&lt;p&gt;The _includes is used to include reusable template compents. I used this directory to accomplish things like WordPess themes do with header.php, footer.php, and sidebar.php.&lt;/p&gt;

&lt;p&gt;You can include these in posts, pages, and layouts with the include syntax.&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;You can see all the includes I use in this blog in the &lt;a href='https://github.com/brianium/brianium.github.com' target='_blank'&gt;github repo&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id='the_default_layout'&gt;The Default Layout&lt;/h3&gt;

&lt;p&gt;This fella is ideal for homepage material. Just create a file called default.html in the _layouts directory. Here is the default.html layout used on my homepage:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;The only thing you really need to include in a layout is the content placeholder:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h3 id='the_post_layout'&gt;The Post Layout&lt;/h3&gt;

&lt;p&gt;The post layout lets you give a different structure to the various musings on your blog. Here is the layout I used:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;You can see it isn&amp;#8217;t much different from the default layout, just some different stuff going on in the header and main div.&lt;/p&gt;

&lt;p&gt;Further down we will add Disqus support to this layout so people can comment on posts.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='the_blog_index'&gt;The Blog Index&lt;/h2&gt;

&lt;p&gt;Your home page is powered by the index.html file that goes in the root of the project directory. An index should use the default layout, and access the collection of posts.&lt;/p&gt;

&lt;p&gt;The front matter is easy: Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;A very simple list of posts can be displayed by accessing the &lt;code&gt;site.posts&lt;/code&gt; collection with Liquid:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='adding_posts'&gt;Adding Posts&lt;/h2&gt;

&lt;p&gt;Jekyll works off of convention for finding posts. It will look in the _posts directory for files that match your permalink type.&lt;/p&gt;

&lt;p&gt;The permalink type is specified in the _config.yml file. You can look at the various types &lt;a href='https://github.com/mojombo/jekyll/wiki/Permalinks' target='_blank'&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To create this post, I added a file named 2012-06-12-blog-with-jekyll-and-github.md to the _posts directory. You can choose Markdown, Textile, or html files for your posts. Additionally, posts will be run through a Liquid converter.&lt;/p&gt;

&lt;p&gt;In addition to permalink naming convention, make sure your posts are using the post layout in the yaml front matter:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='add_an_rss_feed'&gt;Add An RSS Feed&lt;/h2&gt;

&lt;p&gt;Want a feed? No problem! Add an atom.xml file to the project directory, and loop through that &lt;code&gt;site.posts&lt;/code&gt; collection.&lt;/p&gt;

&lt;p&gt;Since we have no need for a layout, specify this is the case in the front matter:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;Then make use of the &lt;code&gt;site.posts&lt;/code&gt; collection to generate your feed:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;Done-zo!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='add_a_sitemap_xml_file'&gt;Add A Sitemap XML File&lt;/h2&gt;

&lt;p&gt;This is not unlike the atom.xml file. Same front matter and everything. Create sitemap.xml in the project directory and add the following after the front matter (changing the relevant bits for your blog of course):&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='syntax_highlighting_with_pygments'&gt;Syntax Highlighting With Pygments&lt;/h2&gt;

&lt;p&gt;Jekyll makes use of Python Pygments to do its highlighting magic. It is pretty easy to install, and can be done with a one-liner at the terminal. It &lt;a href='https://github.com/mojombo/jekyll/wiki/install' target='_blank'&gt;varies&lt;/a&gt; by operating system, but on Ubuntu I ran the following:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;h3 id='using_pygments'&gt;Using Pygments&lt;/h3&gt;

&lt;p&gt;To highlight code, just wrap your code blocks in the highlight tag and choose a &lt;a href='http://pygments.org/docs/lexers/' target='_blank'&gt;lexer&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;You will also need to generate the pygment css file. There are several &lt;a href='http://pygments.org/docs/styles/' target='_blank'&gt;styles&lt;/a&gt; to choose from, but I chose monokai. You can generate the css file via the command line:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;You can then include pygments.css in your layout and you are good to go. Oddly enough, I had to make some additions to the generated css file to get things looking the way I wanted:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='support_comments_with_disqus'&gt;Support Comments With Disqus&lt;/h2&gt;

&lt;p&gt;There is a nice JavaScript solution for comments called Disqus. Head over to their &lt;a href='http://disqus.com/' target='_blank'&gt;site&lt;/a&gt; and signup.&lt;/p&gt;

&lt;p&gt;You will be given a script, and the place to paste it is your post layout.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='test_locally'&gt;Test Locally&lt;/h2&gt;

&lt;p&gt;It&amp;#8217;s easy to to test locally. &lt;code&gt;cd&lt;/code&gt; into your project directory via terminal and run the following:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;The &amp;#8211;auto flag says listen for changes to files, and recompile automatically when a change happens (good for development). The &amp;#8211;server flag starts the server to test on.&lt;/p&gt;

&lt;p&gt;This will use the port specificed in the _config.yml file (in our case 4000). You can visit your sweet Jekyll site by pointing your browser to http://localhost:4000.&lt;/p&gt;

&lt;p&gt;Don&amp;#8217;t panic if your Disqus comments aren&amp;#8217;t working locally. You can verify they are working after deploying to Github.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='deploy_to_github_pages'&gt;Deploy To Github Pages&lt;/h2&gt;

&lt;p&gt;Deploying to Github is a snap. Github will auto-magically make a page for you if you create a public repository with the convention yourusername.github.com, and this is why we named our project folder with this convention.&lt;/p&gt;

&lt;p&gt;Initialize the git repo in your project directory, commit, then push. Your first push will require 10 minutes to allow Github to publish your page. After that, pushes will have your changes showing up almost instantly.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A Github page is created for you when you create a public repo called yourusername.github.com&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2 id='use_a_custom_domain'&gt;Use A Custom Domain&lt;/h2&gt;

&lt;p&gt;It may be the case that you want to use your own domain for your blog. No problem. It&amp;#8217;s as easy as adding a file to your repository.&lt;/p&gt;

&lt;h3 id='the_cname_file'&gt;The CNAME File&lt;/h3&gt;

&lt;p&gt;Create a file called CNAME and add it to your project directory. It should have a line containing your sub-domain or top level domain. My particular CNAME file has this one line:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;Add this file to your repository, and push it!&lt;/p&gt;

&lt;h3 id='update_a_record_and_cname_records'&gt;Update &amp;#8220;A&amp;#8221; Record and CNAME Records&lt;/h3&gt;

&lt;p&gt;You will have to hit up your domain registrar and change the &amp;#8216;A&amp;#8217; record for your domain to point to the following ip: 204.232.175.78&lt;/p&gt;

&lt;p&gt;Change your www CNAME record to point to yourusername.github.com, in my case brianium.github.com.&lt;/p&gt;

&lt;p&gt;Wait for the changes to propagate and you are good to go!&lt;/p&gt;

&lt;h2 id='conclusion'&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There is a bit of setup involved, but once it&amp;#8217;s done, you will find it is pretty easy to whip up posts.&lt;/p&gt;

&lt;p&gt;The benefits are amazing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Flexibility of being powered by a Github repo, push from anywhere and voila, blog updated!&lt;/li&gt;

&lt;li&gt;Free hosting a&amp;#8217;la Github. Can&amp;#8217;t beat free.&lt;/li&gt;

&lt;li&gt;Portability. It&amp;#8217;s static html. Don&amp;#8217;t like Github pages? Drag your static html to any web server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Migration tools are available as well if you are worried about losing posts from another system. Check out &lt;a href='https://github.com/mojombo/jekyll/wiki/blog-migrations' target='_blank'&gt;this&lt;/a&gt; page on Github.&lt;/p&gt;

&lt;p&gt;Don&amp;#8217;t forget to checkout this blog&amp;#8217;s source on Github.&lt;/p&gt;
&lt;a class='button' href='https://github.com/brianium/brianium.github.com' target='_blank'&gt;The Source&lt;/a&gt;
&lt;p&gt;Please feel free to share additional tips and feedback in the comments.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Domain Driven PHP</title>
   <link href="http://brianscaturro.com/2012/05/21/domain-driven-php.html"/>
   <updated>2012-05-21T00:00:00+02:00</updated>
   <id>http://brianscaturro.com.com/2012/05/21/domain-driven-php</id>
   <content type="html">&lt;!-- Title: Domain Driven PHP --&gt;
&lt;h2&gt;Domain Driven Design&lt;/h2&gt;
&lt;p&gt;
	Domain Driven Design (DDD) is a software philosophy popularized by Eric Evans and his &lt;a href=&quot;http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215&quot; target=&quot;_blank&quot;&gt;book&lt;/a&gt; on the subject. It's a pretty sweet way to approach software and it has gained popularity throughout the software community, but I don't see it in the PHP community as much I would like to. I recently undertook a simple PHP application that could effectively demonstrate the concepts, as well as show how to test drive such an application.
&lt;/p&gt;
&lt;p&gt;
	The fishing application I developed was inspired by the principles of DDD and &lt;a href=&quot;http://jeffreypalermo.com/blog/the-onion-architecture-part-1/&quot; target=&quot;blank&quot;&gt;Onion Architecture&lt;/a&gt;.
&lt;/p&gt;
	&lt;a class=&quot;button&quot; href=&quot;https://github.com/brianium/tdd-ddd-php&quot; target=&quot;_blank&quot;&gt;View It On Github&lt;/a&gt;
&lt;hr /&gt;
&lt;h2&gt;The Application&lt;/h2&gt;
&lt;p&gt;
	The focus of this project was not to make a cutting edge console application that forces people to weep tears of joy. The purpose of making this application was to test drive a simple application that has domain and infrastructure layers. You can follow the directions on the &lt;a href=&quot;https://github.com/brianium/tdd-ddd-php&quot; target=&quot;_blank&quot;&gt;github page&lt;/a&gt; to get the tests running and test the actual app out.
&lt;/p&gt;
&lt;p&gt;
	The actual application file was pretty easy to make after all the code was tested. At such a high level, it made me pretty giddy to see all my well tested components being glued together to form an application. Let's take a quick look at the pieces that make up this machine.
&lt;/p&gt;
&lt;blockquote class=&quot;superquote&quot;&gt;
	&lt;p&gt;
		The purpose of making this application was to test drive a simple application that has domain and infrastructure layers.
	&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2&gt;Domain&lt;/h2&gt;
&lt;p&gt;
	The domain of the application is what houses the &lt;em&gt;what&lt;/em&gt; of my fishing app. The domain is where the objects that make up the universe of our application live - that is &quot;what is this application about.&quot; The main logic of the application lives here. Let's look at the different pieces of the domain layer.
&lt;/p&gt;
&lt;h3&gt;Entities&lt;/h3&gt;
&lt;p&gt;
	Entities are the models of our application, and they are concerned with identity. These are the guys that are persisted in a database, and they are concerned with things like primary keys and ids. Take a look at the fish entity used throughout the application:
&lt;/p&gt;
Liquid error: No such file or directory - posix_spawnp
&lt;p&gt;
	The fish entity is our only persisted model. It is the focus of the application. Without a fish, how can we go fishing!?!?
&lt;/p&gt;
&lt;h3&gt;Repositories&lt;/h3&gt;
&lt;p&gt;
	Repositories that interact with the database actually belong in the infrastructure layer, but the interfaces for such objects belong in the domain. They are the objects we interact with to query and persist our entities. Let me show you what I mean by showing an example:
&lt;/p&gt;
Liquid error: No such file or directory - posix_spawnp
&lt;p&gt;
	These abstract interfaces are crucial for unit testing behaviors with stubs and mocks.
&lt;/p&gt;
&lt;h3&gt;Services&lt;/h3&gt;
&lt;p&gt;
	Services coordinate various domain objects. The example application has a &lt;code&gt;PondStocker&lt;/code&gt; service that is in charge of stocking the &lt;code&gt;Pond&lt;/code&gt; object with a given number of fish. The &lt;code&gt;Pond&lt;/code&gt; and &lt;code&gt;Fisherman&lt;/code&gt; objects are services as well. They coordinate functionality between other domain objects.
&lt;/p&gt;
&lt;blockquote class=&quot;superquote&quot;&gt;
	&lt;p&gt;
		The domain layer is composed of entities, repositories, services, and value objects.
	&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2&gt;Infrastructure&lt;/h2&gt;
&lt;p&gt;
	Infrastructure is what makes the application tick. This is where configuration, database objects, and third party libraries live.
&lt;/p&gt;
&lt;h3&gt;Persistence&lt;/h3&gt;
&lt;p&gt;
	This namespace is where the implementations of the repositories from the domain live. The fishing application has only one repository implementation, and it is derived from the interface in the domain layer:
&lt;/p&gt;
Liquid error: No such file or directory - posix_spawnp
&lt;h3&gt;Services&lt;/h3&gt;
&lt;p&gt;
	Infrastructure services coordinate lower level pieces of the application. For this application, this includes the autoloader and console helpers.
&lt;/p&gt;
&lt;h3&gt;Vendors&lt;/h3&gt;
&lt;p&gt;
	The &lt;code&gt;Vendors&lt;/code&gt; directory is where third party libraries are stored. The fishing application relies on Doctrine2 for data persistence.
&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Tests&lt;/h2&gt;
&lt;p&gt;
	PHPUnit was used to test drive this app. It makes use of assertions and mocks/stubs to separate unit and integration tests. I would definitely recommend checking out the tests in the repo to get a feel for how its done.
&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Check It Out!&lt;/h2&gt;
&lt;p&gt;
	Go ahead and check out the &lt;a href=&quot;https://github.com/brianium/tdd-ddd-php&quot; target=&quot;_blank&quot;&gt;repository&lt;/a&gt; on Github. There are many ways to persue DDD, and it can be a useful design tool in PHP too. 
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&quot;/images/console.png&quot; alt=&quot;the fishing app in action&quot; title=&quot;console&quot; width=&quot;504&quot; height=&quot;236&quot; /&gt;
&lt;/p&gt;
&lt;a class=&quot;button&quot; href=&quot;https://github.com/brianium/tdd-ddd-php&quot; target=&quot;_blank&quot;&gt;View It On Github&lt;/a&gt;
</content>
 </entry>
 
 <entry>
   <title>Is Agile Dead?</title>
   <link href="http://brianscaturro.com/2012/04/27/is-agile-dead.html"/>
   <updated>2012-04-27T00:00:00+02:00</updated>
   <id>http://brianscaturro.com.com/2012/04/27/is-agile-dead</id>
   <content type="html">&lt;!-- Title: Is Agile Dead? --&gt;
&lt;h2&gt;Why Ask?&lt;/h2&gt;
&lt;p&gt;
	I recently had the good pleasure of attending &lt;a href=&quot;http://kalamazoox.org/&quot; target=&quot;_blank&quot;&gt;The Kalamazoo X Conference&lt;/a&gt;. It's a cool little conference designed to give developers and designers a chance to focus on soft skills - that is interacting with people, communicating, standing out, etc.. 
&lt;/p&gt;
&lt;p&gt;
	It was &lt;a href=&quot;http://about.me/leongersing&quot; target=&quot;_blank&quot;&gt;Leon Gersing&lt;/a&gt; that had quite a lot to say on the dominant culture's impact on trends. He had a lot of fun stuff to say about tripping on LSD while programming, failing with joy, and determining your end goal - which for many of us is making software. Leon said one thing that struck a chord with me:
&lt;/p&gt;
&lt;blockquote class=&quot;superquote&quot;&gt;
	&lt;p&gt;
		Agile is dead.
	&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
	Coming from a web warrior like Leon, I have to at least consider it.
&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Why Is It Dead?&lt;/h2&gt;
&lt;p&gt;
	Leon made the point that most people doing Agile today are actually doing Waterfall with Agile terms. That is the dominant culture of Waterfall fan boys has assumed Agile, but has really made it something new.
&lt;/p&gt;
&lt;p&gt;
	Doing .NET development, I have seen my fair share of psuedo scrummers, and agile wannabes. Or people who just don't care. Hearing that Waterfall statement resonated with me, because I have seen it happen.
&lt;/p&gt;
&lt;p&gt;
	The bottom line matters in business, and I think there are many &quot;big business&quot; types that like the idea of agile, but they like the idea of tons of documentation, and tons of process better. I have a hard time saying Agile is dead, because I am on the front lines constantly fighting for more Agile practices. Less process, better developer/customer interaction, and more working software! These are good things!
&lt;/p&gt;
&lt;blockquote class=&quot;superquote&quot;&gt;
	&lt;p&gt;
		Less process, better developer/customer interaction, and more working software!
	&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;There Is Hope&lt;/h2&gt;
&lt;p&gt;
	I refuse to believe Agile is dead. Watching true wizards like Uncle Bob still do their thing is encouraging. It's plain beautiful to hear guys like this talk about code. Take a waltz down to Uncle Bob's &lt;a href=&quot;http://www.cleancoders.com/codecast/clean-code-episode-10/show&quot; target=&quot;_blank&quot;&gt;Clean Coders&lt;/a&gt; site and see how he lives the dream!
&lt;/p&gt;
&lt;p&gt;
	I see it all the time where Agile can still be used to meet the end goal of delivering software. Thats what we do. Thats what we should aim to do. The agile manifesto is getting older, but I think it is still relevant:
&lt;/p&gt;
&lt;blockquote class=&quot;superquote&quot;&gt;
	&lt;p&gt;
		&lt;strong&gt;Individuals and interactions&lt;/strong&gt; over processes and tools&lt;br&gt;
		&lt;strong&gt;Working software&lt;/strong&gt; over comprehensive documentation&lt;br&gt;
		&lt;strong&gt;Customer collaboration&lt;/strong&gt; over contract negotiation&lt;br&gt;
		&lt;strong&gt;Responding to change&lt;/strong&gt; over following a plan&lt;br&gt;&lt;br&gt;

		That is, while there is value in the items on&lt;br&gt;
		the right, we value the items on the left more.
	&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;
	I hope to see an attitude and environment that brings new life into this manifesto. I don't think Agile is dead, but it is being suffocated.
&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>TDD With Mock Objects And PHPUnit</title>
   <link href="http://brianscaturro.com/2012/03/27/tdd-with-mock-objects-and-phpunit.html"/>
   <updated>2012-03-27T00:00:00+02:00</updated>
   <id>http://brianscaturro.com.com/2012/03/27/tdd-with-mock-objects-and-phpunit</id>
   <content type="html">&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;
Test driven development ,or TDD, should be no stranger to many folks out in the code wilds. Writing tests first aids in design as well as quality control. I am always amazed at how my own testing practices evolve. 
&lt;/p&gt;
&lt;p&gt;
It wasn't until recently that I discovered the beauty (and common sense) of separating integration tests from unit tests. Yes yes, integration tests often test units too, but the main focus of these tests is to test how your units (you guessed it) integrate with other components (the server, database, services, etc...).
&lt;/p&gt;
&lt;p&gt;
It can be tricky to isolate unit tests away from integration tests when your units are composed of something that is fundamentally useless without one of those components. Imagine a DB object, or a REST client, or a socket. Your unit tests need to test the units at their core, and not how they integrate with other resources. How do you test a unit that has a dependency on a socket object, without having to worry about opening and closing a socket connection every test?
&lt;/p&gt;

&lt;h2&gt;Mock objects as the solution&lt;/h2&gt;
&lt;p&gt;
These bad boys need to be part of every testers toolkit. We are going to use the socket scenario (and yes this is because it has been my most recent use case) to demonstrate how mock objects can be used to make more pure unit tests. Remember the goal is to separate your tests into unit tests and integration tests.
&lt;/p&gt;

&lt;h3&gt;The unit to test&lt;/h3&gt;
&lt;p&gt;
The unit in question is an object that encapsulates executing a socket command. Think command pattern. The language in question today is PHP, but the principle is the same in other environments. In fact it is a principle I use in the .NET realm with C# and &lt;a href=&quot;http://code.google.com/p/moq/&quot; title=&quot;Moq&quot; target=&quot;_blank&quot;&gt;Moq&lt;/a&gt;.
&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;
Take note that our &lt;code&gt;SocketCommand&lt;/code&gt; object forms a dependency with the &lt;code&gt;BinarySocket&lt;/code&gt; object. Let's take a look at the &lt;code&gt;BinarySocket&lt;/code&gt; class.
&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;
As you can see, when a &lt;code&gt;BinarySocket&lt;/code&gt; is instantiated, a connection is opened on the given ip and port. This could really slow down our tests if these connections are being opened all over the place.
&lt;/p&gt;

&lt;h3&gt;Using mock objects to test behavior&lt;/h3&gt;
&lt;p&gt;
Rather than creating these socket objects and having connections opened, we will mock the &lt;code&gt;BinarySocket&lt;/code&gt; object in order to test its role in the &lt;code&gt;SocketCommand&lt;/code&gt; object. As you can see from the &lt;code&gt;SocketCommand&lt;/code&gt; code above, the &lt;code&gt;BinarySocket&lt;/code&gt; is used within the &lt;code&gt;execute&lt;/code&gt; method of the &lt;code&gt;SocketCommand&lt;/code&gt;. We need to test this behavior without being concerned with whether the &lt;code&gt;BinarySocket&lt;/code&gt; is making a connection or not.
&lt;/p&gt;

&lt;p&gt;
Here is how we are going to set up the &lt;code&gt;SocketCommand&lt;/code&gt; test case using PHPUnit:
&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;
Using PHPUnit's mock library, it is easy to setup an object that will meet the requirements of the &lt;code&gt;SocketCommand&lt;/code&gt; constructor. In a library like &lt;a href=&quot;http://code.google.com/p/moq/&quot; title=&quot;Moq&quot; target=&quot;_blank&quot;&gt;Moq&lt;/a&gt; in .NET town, you would be more likely to test an interface instead of a concrete implementation, but PHP offers a little more &quot;flexibility&quot; here.
&lt;/p&gt;

&lt;p&gt;
The mock object has already allowed us to meet the requirements of the &lt;code&gt;SocketCommand&lt;/code&gt; constructor. Our mock object is effectively the required &lt;code&gt;BinarySocket&lt;/code&gt;; It meets the required &lt;code&gt;BinarySocket&lt;/code&gt; interface, and it does not have the added baggage of actually opening a socket connection.&lt;/p&gt;

&lt;p&gt;
&lt;p&gt;
Remember the &lt;code&gt;SocketCommand&lt;/code&gt; makes use of the &lt;code&gt;BinarySocket&lt;/code&gt; in it's &lt;code&gt;execute&lt;/code&gt; method. We want to make sure this is happening, and this is what we are going to test.&lt;/p&gt;

&lt;h3&gt;Setting expectations&lt;/h3&gt;

&lt;p&gt;
We need to tell our testing framework, that we &lt;em&gt;expect&lt;/em&gt; the &lt;code&gt;execute&lt;/code&gt; method of our tested unit to call our mock object's &lt;code&gt;write&lt;/code&gt; method. Done!&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;
Lets break this down.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;&lt;code&gt;expects($this-&gt;once())&lt;/code&gt;&lt;/strong&gt;: This line tells the test runner to expect that the method we are testing will be called at least once. If it isn't, then an exception is thrown and the test fails.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;&lt;code&gt;method('write')&lt;/code&gt;&lt;/strong&gt;: This is the method of the interface our object is mocking that will be called. In this case we are saying the &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;BinarySocket&lt;/code&gt; will be called.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;&lt;code&gt;with(...)&lt;/code&gt;&lt;/strong&gt;: The &lt;code&gt;with&lt;/code&gt; method of our mock object allows us to specify what arguments the chosen method will be called with.
&lt;/p&gt;
&lt;p&gt;
Finally, after we set our expectations, we run the method on our unit to test. If that method does not call the mock object's &lt;code&gt;write&lt;/code&gt; method in exactly the way we described it, then an exception will be thrown and the test will fail. Here is the complete test case.
&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;
Remember the beauty of this is being able to separate unit tests from integration tests. We have made our &lt;code&gt;SocketCommand&lt;/code&gt; testable without worrying about socket connections opening. This has the benefit of making our unit tests faster, but also more concerned with the actual business at hand.
&lt;/p&gt;
&lt;p&gt;
Whatever the language, whatever the environment, mock objects are an indispensable tool, if you want to do effective test driven development that won't slow you or your tests down.
&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>JavaScript Masterclass With Thomas Fuchs and Amy Hoy: A Review</title>
   <link href="http://brianscaturro.com/2012/03/10/javascript-masterclass-review.html"/>
   <updated>2012-03-10T00:00:00+01:00</updated>
   <id>http://brianscaturro.com.com/2012/03/10/javascript-masterclass-review</id>
   <content type="html">&lt;p&gt;
Recently I had the pleasure of taking the &lt;a href=&quot;http://javascriptmasterclass.com/&quot; target=&quot;_blank&quot;&gt;JavaScript Masterclass&lt;/a&gt; with noted JavaScript guru Thomas Fuchs and his brilliant accomplice Amy Hoy. The class was taught over 2 days, each day consisting of a four hour session. Eight hours might not sound like a lot, but there was a wealth of information included.
&lt;/p&gt;

&lt;h2&gt;What they covered&lt;/h2&gt;
&lt;p&gt;
For someone who has been doing JavaScript development for a while, this class had quite a bit of refresh material. Don't let that put you off. Amy and Thomas do a great job of shedding new light on the core of JavaScript, and it doesn't hurt to have an expert or two answering questions via video.
&lt;/p&gt;

&lt;h3&gt;The JavaScript language&lt;/h3&gt;
&lt;p&gt;
Thomas and Amy do a good job of explaining JavaScript's &quot;everything is an object&quot; nature, it's object model, and it's nearly functional design.
&lt;/p&gt;
&lt;p&gt;
It wasn't anything terribly new for me, but I did get rocked on a couple things, and it was really great to have an expert walk you through and confirm your assumptions. A classic example of augmenting JavaScript was taught in the class, and it exhibited much of what makes JavaScript so awesome:
&lt;/p&gt;
Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;
This tiny example exhibits a lot of what is taught: JavaScript and the prototype, closures, and the functional powers of JavaScript.
&lt;/p&gt;

&lt;p&gt;
In addition to the core features of the language, Thomas and Amy will drive meta programming into your face - and hard at that. You will learn how to use curry powers and call functions dynamically and use the powers of JavaScript reflection.
&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;h3&gt;JavaScript Infrastructure&lt;/h3&gt;
&lt;p&gt;
So many of us (myself included) have had a tendency to look at JavaScript as an exception to &quot;real programming&quot;. This part of the course is definitely what I needed to hear and see in action. Scripts and their structure tend to be jumbled into disparate massive minified scripts, or no separation at all exists, and you end up with the same massive file for development and production.&lt;/p&gt;

&lt;p&gt;
Thomas and Amy show you how to drop this nasty habit and organize your scripts into a helpful folder structure like you would with any other program. The focus of the class was on &lt;a href=&quot;http://getsprockets.org&quot; target=&quot;_blank&quot;&gt;Sprockets&lt;/a&gt;, a nice little tool in ruby with a command line script that can be used.
&lt;/p&gt;

&lt;p&gt;
Given this structure:&lt;br&gt;&lt;img class=&quot;bordered&quot; src=&quot;/images/sprockets-structure.png&quot; title=&quot;sprockets directory structure&quot; width=&quot;120&quot; height=&quot;69&quot; /&gt;&lt;br&gt; You can have a script set up like so:
&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;You can then run the &lt;code&gt;sprocketize&lt;/code&gt; command like so:&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;Voila - your scripts are included into the closure above. No more hassle of dealing with one jumbo script. Thomas and Amy show how this is an invaluable tool, and your JavaScript can and should be treated like any other application code.&lt;/p&gt;

&lt;p&gt;One thing to note: The class seems to assume use of Sprockets version 1. Sprockets 1 is a bit outdated at this point, but it gives the desired functionality above. For some reason, Sprockets 2 dropped the ability to have require directives inside of a closure - you are now forced to include directives at the top of a script. This makes it less useful in my opinion, and after wrestling with Sprockets 2 for a hot second, I decided to drop it for Sprockets 1. So when you install that bad brotha, make sure you save yourself a headache:&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;h3&gt;Unit testing&lt;/h3&gt;
&lt;p&gt;I'm no stranger to unit testing, but I'll confess it is absent from my JavaScript more often than it should be. Thomas gives a real solid introduction to unit testing in JavaScript, and you will see things you &lt;strong&gt;should&lt;/strong&gt; be used to in your day to day code adventures:&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;h2&gt;How they covered it&lt;/h2&gt;
&lt;p&gt;The class was very interactive. I was able to see Amy or Thomas via video, and they were constantly reading chat and answering questions. They even gave some homework and super fun assignments to tackle - all with feedback. They offered up expert advice, and if you are a beginner you won't be after this class, and if you are in the advanced camp it will definitely confirm your assumptions and even drop a few new goodies your way. It can't hurt to have on your resume that you studied at the feet of the masters either.&lt;/p&gt;

&lt;p&gt;Plus, you get the tasty ebook &lt;a href=&quot;http://javascriptrocks.com/performance/&quot; target=&quot;_blank&quot;&gt;JavaScript Performance Rocks&lt;/a&gt; by these two wizards.&lt;/p&gt;

&lt;p&gt;
  The class was also a ton of fun:&lt;br&gt;
  &lt;img src=&quot;/images/twitter-amy.png&quot; alt=&quot;&quot; title=&quot;Screenshot_8&quot; width=&quot;355&quot; height=&quot;104&quot; class=&quot;size-full wp-image-1547&quot; /&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;I give this course an 11 out of 3!&lt;/strong&gt;
&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>My First Crack At Managing Time With the Pomodoro Technique</title>
   <link href="http://brianscaturro.com/2012/02/25/starting-pomodoro-technique.html"/>
   <updated>2012-02-25T00:00:00+01:00</updated>
   <id>http://brianscaturro.com.com/2012/02/25/starting-pomodoro-technique</id>
   <content type="html">&lt;p&gt;Who doesn't struggle with time management? I think that it is a pretty common battle, especially for us developers out there. Every day is tackled with the best of intentions: I am going to learn this, I am going to program that, I am going to blog about this, etc...&lt;/p&gt;

&lt;p&gt;The problem is that our focus is very fractured this way. When you set out to do something with no real goal in mind, you tend to set out with very little focus. As each day comes to a close, time becomes the enemy because there is just never enough of it.&lt;/p&gt;

&lt;p&gt;For me, the way to remedy the situation is to throw software at it. Set up massive projects with milestones, tasks, and timers that you can click stop and start on. This is good to see what is on the table, but this can be a little daunting, and it still doesn't address the core issue.&lt;/p&gt;

&lt;p&gt;The difficulty stems from the fact that we as human beings are quick to go down rabbit holes. Our minds wander. I can't even think of how many times I have sat down ready to read, program, blog, and have just wandered off into something completely different than what I originally intended to do.&lt;/p&gt;

&lt;h2&gt;An honest look at my typical approach&lt;/h2&gt;
&lt;p&gt;This is probably a little more honest than most of us young professionals care to be, but this is how a typical task for me goes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sit down to work&lt;/li&gt;
&lt;li&gt;Open up my text editor&lt;/li&gt;
&lt;li&gt;Open up last.fm and start searching for some music I want to listen to&lt;/li&gt;
&lt;li&gt;Start writing some code&lt;/li&gt;
&lt;li&gt;Don't like the song that is playing so I need to flip through several to get to one I like&lt;/li&gt;
&lt;li&gt;Start writing some code again&lt;/li&gt;
&lt;li&gt;Been a while since I checked Facebook and Twitter....better do that&lt;/li&gt;
&lt;li&gt;Code a little more&lt;/li&gt;
&lt;li&gt;Remember that other cool thing I started earlier in the week and revisit that&lt;/li&gt;
&lt;li&gt;Email notification pops up so I better read that&lt;/li&gt;
&lt;li&gt;Code a little more&lt;/li&gt;
&lt;li&gt;Favorite TV show is on...so I have to watch that&lt;/li&gt;
&lt;li&gt;Call it a night and go to bed&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Well that's embarrassing.... not really a whole lot of actual work getting done.&lt;/p&gt;

&lt;h2&gt;Pomodoro Technique to the rescue!&lt;/h2&gt;
&lt;p&gt;The Pomodoro (that is Italian for tomato btw) Technique is a technique that was invented by &lt;a href=&quot;http://www.pomodorotechnique.com/about.html&quot; title=&quot;About Pomodoro Technique&quot; target=&quot;_blank&quot;&gt;Francesco Cirillo&lt;/a&gt;. The tagline from the book &lt;a href=&quot;http://pomodoro-book.com/&quot; title=&quot;pomodoro technique illustrated&quot; target=&quot;_blank&quot;&gt;Pomodoro Technique Illustrated&lt;/a&gt; by Staffan Nöteberg says it all: &quot;The easy way to do more in less time.&quot; I had my first crash course in this today with my good friend Bryce Darling. I am still new to it, but here is what I have taken away from it:&lt;/p&gt;

&lt;h3&gt;Create an &quot;Activity Inventory&quot;&lt;/h3&gt;
&lt;p&gt;Make a list of what needs to be done. It does not have to be that complicated - think about what needs to be done and write it down (yes on a piece of paper).&lt;/p&gt;

&lt;h3&gt;Create a &quot;To Do Today&quot; list&lt;/h3&gt;
&lt;p&gt;Take some items you feel confident about doing off of your activity inventory, and make a list out of them. These should be items you feel confident about completing for the day.&lt;/p&gt;

&lt;h3&gt;Set a timer and go!&lt;/h3&gt;
&lt;p&gt;Set a timer for 25 minutes. Work while the timer is ticking down. Ignore those emails, texts, the playlist, that tv show.... and just work. When the timer beeps, take a break!&lt;/p&gt;

&lt;p&gt;Today was my first time taking a stab at this, but I was immediately surprised by how productive I was. I was able to complete two page designs in Photoshop in 4 Pomodori (that is 4 25 minute sprints of work). This is possible because the time is extremely focused.&lt;/p&gt;

&lt;p&gt;While that timer is ticking, you aren't doing anything but working. When the timer is up, you reward yourself with 5, 10, or 15 minutes of a break. Use that time to check the emails, or set up the playlist. Detach yourself from the work completely. Don't think about what you just did, or what you are going to do next. Just relax.&lt;/p&gt;

&lt;h2&gt;What I took away from it&lt;/h2&gt;
&lt;p&gt;I will definitely be reading more from &lt;a href=&quot;http://pomodoro-book.com/&quot; title=&quot;pomodoro technique illustrated&quot; target=&quot;_blank&quot;&gt;Pomodoro Technique Illustrated&lt;/a&gt;, but I see some immediate benefits.&lt;/p&gt; 
&lt;h3&gt;1. Increased productivity.&lt;/h3&gt;
&lt;p&gt;I saw this evidenced today. I was amazed by how much I was able to get done in such a short period of time.&lt;/p&gt;
&lt;h3&gt;2. Less anxiety.&lt;/h3&gt;
&lt;p&gt;By detaching and taking a break for a little bit after each Pomodori, you will decrease your anxiety about the work at hand, and give your brain a chance to run some background threads on what it just did while you sip a coffee, call a friend, or just hang out.&lt;/p&gt;
&lt;h3&gt;3. Ability to assess what you have done.&lt;/h3&gt;
&lt;p&gt;It was nice being able to log 75 minutes for a task. This gave me a greater sense of how much time it actually takes to do work. This will have an immense pay off in estimating and boxing off time in the future.&lt;/p&gt;

&lt;p&gt;There is still a lot to learn, but so far I am sold on this amazing technique for managing time and getting work done!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Mastering The State Pattern In C#</title>
   <link href="http://brianscaturro.com/2012/02/16/mastering-the-state-pattern-in-c-sharp.html"/>
   <updated>2012-02-16T00:00:00+01:00</updated>
   <id>http://brianscaturro.com.com/2012/02/16/mastering-the-state-pattern-in-c-sharp</id>
   <content type="html">&lt;p&gt;I have been spending a lot of time with my nose in the book &lt;a href=&quot;http://www.amazon.com/Applying-Domain-Driven-Design-Patterns-Examples/dp/0321268202/ref=sr_1_1?ie=UTF8&amp;qid=1329307174&amp;sr=8-1&quot; target=&quot;_blank&quot;&gt;Applying Domain-Driven Design and Patterns With Examples in C# and .NET&lt;/a&gt;. This is a book with a strong emphasis on design. Period. Design patterns are a big emphasis in this book. I like to think I have a solid grasp of design patterns, but we never know quite as much as we think right? I encountered the classic state pattern and decided to play around with it a bit - that is try it out in a real world situation I encountered recently.&lt;/p&gt;

&lt;h2&gt;State Pattern Basics&lt;/h2&gt;
&lt;p&gt;The state pattern exists to easily manage state. Think of state as the difference between on and off. When a light switch is flipped up, then it's state is currently &quot;on&quot;. When the switch is flipped down, the state is currently &quot;off&quot;. This is a simple case. You could easily have more than just two states. Think of a fancy dimmer! As you turn it, it is 30% brighter, 40% brighter, 60% brighter, etc. Enough metaphor! What does this mean in code town?&lt;/p&gt;

&lt;p&gt;The state pattern is composed of two base objects: a context and a state. All states are derived from the base state. The context is the main player - the object that users are really interested in. It is composed of a state object, and has a &lt;code&gt;Request&lt;/code&gt; method. The &lt;code&gt;Request&lt;/code&gt; method essentially hands off responsibility to the state's &lt;code&gt;Handle&lt;/code&gt; method, and the state is responsible for performing the guts of the work and changing the state reference that belongs to the context. For you UML buffs out there, it might look something like this:&lt;/p&gt;

&lt;div class=&quot;post-image&quot;&gt;&lt;img src=&quot;/images/statepatternuml.png&quot; alt=&quot;the state pattern in uml&quot; title=&quot;statepatternuml&quot; width=&quot;432&quot; height=&quot;330&quot; class=&quot;size-full wp-image-1492&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Let's take a look at this in code.&lt;/p&gt;
&lt;h3&gt;The State&lt;/h3&gt;
Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;Here we have our abstract &lt;code&gt;State&lt;/code&gt; object that serves as the base for all other states, and a couple of concrete implementations of the base class. &lt;/p&gt;

&lt;p&gt;Take a look at &lt;code&gt;ConcreteStateA&lt;/code&gt;. Notice that the &lt;code&gt;Handle&lt;/code&gt; method accepts a reference to the &lt;code&gt;Context&lt;/code&gt; object. Within the method, &lt;code&gt;ConcreteStateA&lt;/code&gt; changes the state of the &lt;code&gt;Context&lt;/code&gt; object to a different state. This is usually done in response to some condition - for example when an account balance drops below a certain amount. &lt;/p&gt;

&lt;p&gt;Let's see how the &lt;code&gt;Context&lt;/code&gt; implements the &lt;code&gt;State&lt;/code&gt; objects.&lt;/p&gt;

&lt;h3&gt;The Context&lt;/h3&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;Here you can see how the &lt;code&gt;Context&lt;/code&gt; holds on to a &lt;code&gt;State&lt;/code&gt; object. We create a &lt;code&gt;state&lt;/code&gt; property and set the default state in the constructor to an instance of &lt;code&gt;ConcreateStateA&lt;/code&gt;. Notice that when the &lt;code&gt;Request&lt;/code&gt; method is called, the &lt;code&gt;Context&lt;/code&gt; passes a reference of itself to the &lt;code&gt;Handle&lt;/code&gt; method of the &lt;code&gt;State&lt;/code&gt; object. Run this bad boy and you will notice how the &lt;code&gt;State&lt;/code&gt; objects take over managing the active state:&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;h2&gt;A Real World Example&lt;/h2&gt;
&lt;p&gt;Given a basic understanding of what the state pattern is, it is easy to see how it can be applied to a ton of different scenarios. A little while ago I was charged with managing reward point levels for a customer rewards program. When a customer reaches &lt;em&gt;x&lt;/em&gt; amount of total points, they get &lt;em&gt;y&lt;/em&gt; level. This problem is just begging to use the state pattern. Let's translate what we learned above into some real world code.&lt;/p&gt;

&lt;h3&gt;The State&lt;/h3&gt;
&lt;p&gt;Our state objects will be represented as &lt;code&gt;RewardLevel&lt;/code&gt; objects. As a customer accumulates points, they earn new levels or &quot;states&quot; representing their reward levels. So let's translate our state over to a reward level object:&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;Notice the &lt;code&gt;RewardLevel&lt;/code&gt; class creates the basic operations of our custom state. Pay special attention to the &lt;code&gt;CheckState&lt;/code&gt; method. This method is fired after any method that changes the state (i.e. changing the number of points). This guy is one stop shopping for updating the &lt;code&gt;RewardLevel&lt;/code&gt; state that belongs to the &lt;code&gt;Participant&lt;/code&gt; context. Let's look at the following concrete implementations of the &lt;code&gt;RewardLevel&lt;/code&gt; class.&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;The real beauty of the pattern shines when you implement behavior that is different on a reward level by reward level basis. Maybe you have a method like &lt;code&gt;GetDiscountAmount&lt;/code&gt; that returns a higher percent as you get higher in the reward level chain.&lt;/p&gt;

&lt;h3&gt;The Context&lt;/h3&gt;
&lt;p&gt;Remember the context is the main object that people are interested in. In this case it is the participant in the rewards program. We are only concerned with what level the participant is, and we only want to interact with that participant.&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;Notice how we default our &lt;code&gt;Participant&lt;/code&gt; to &lt;code&gt;BronzeLevel&lt;/code&gt; in the constructor. We call &lt;code&gt;RewardLevel.SetPoints(points)&lt;/code&gt; to update the level to the appropriate level should it be higher than bronze (maybe the points passed in the constructor are coming from a database or being persisted elsewhere).&lt;/p&gt;

&lt;p&gt;Notice how our &lt;code&gt;AddPoints&lt;/code&gt; and &lt;code&gt;SetPoints&lt;/code&gt; methods are calling the same methods on the &lt;code&gt;RewardLevel&lt;/code&gt; object. Remember that &lt;code&gt;GetDiscount&lt;/code&gt; method we mentioned above? Seeing how we only want to interact with our &lt;code&gt;Participant&lt;/code&gt; object, we could easily modify our &lt;code&gt;Participant&lt;/code&gt; object to include the following method:&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;h2&gt;Wrapping It All Up&lt;/h2&gt;
&lt;p&gt;This example could easily be enhanced to provide more real world functionality. I'll attach the code I used to drive this example (complete with tests!). Download it, play with it, criticize it, and have fun!&lt;/p&gt;

&lt;a class=&quot;add-bottom button&quot; href=&quot;/downloads/RewardLevelsTests.zip&quot;&gt;Download Demo Source&lt;/a&gt;
</content>
 </entry>
 
 <entry>
   <title>CakePHP - Unit Testing Models</title>
   <link href="http://brianscaturro.com/2011/11/17/cakephp-unit-testing-models.html"/>
   <updated>2011-11-17T00:00:00+01:00</updated>
   <id>http://brianscaturro.com.com/2011/11/17/cakephp-unit-testing-models</id>
   <content type="html">&lt;p&gt;Testing is critical to any application development process. Seeing that green bar instills confidence to move forward, and gives you a handy tool to ensure any future changes won't break your carefully crafted application.&lt;/p&gt;

&lt;p&gt;CakePHP is one of the big kids on the block for rapid development in the PHP community, and it comes with some nice tools for testing your MVC applications. We are going to take a look at testing the M in that acronym. Let's cover setting up fixtures and test cases to automate this process.&lt;/p&gt;

&lt;h2&gt;Setup CakePHP for testing&lt;/h2&gt;
&lt;p&gt;CakePHP 1.3 uses the popular PHP testing framework &lt;a target=&quot;_blank&quot; href=&quot;http://www.simpletest.org/&quot;&gt;SimpleTest&lt;/a&gt;. CakePHP is compatible with the 1.0.x branch of SimpleTest, and making CakePHP ready for testing is as easy as dropping the simpletest folder into the app/vendor directory. From here out we will be working in the app/tests directories of our CakePHP installation.&lt;/p&gt;

&lt;h2&gt;Creating test fixtures&lt;/h2&gt;
&lt;p&gt;Fixtures are a way to get temporary test data into your test cases. They are always a good idea because they isolate your test data from your live data. CakePHP uses fixtures to create test tables, populate those tables, then delete those tables all in the course of running a test. Fixtures are also handy because they spare you the task of creating and deleting data manually.&lt;/p&gt;

&lt;p&gt;We are going to be testing a typical user class in CakePHP and we will begin by creating a fixture for the User model. Create our fixture file in app/tests/fixtures and name it user_fixture.php. Creating a fixture is easy:&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;Notice the $name property. This should be the same thing you would use for the $name property in the User model we are testing. The next thing we need to do is setup the $fields property. This property is used to mirror the schema for the model.&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;Each key of the $fields property represents a property of the model (or column in the database ). For each property you pass an array with information about the property. The keys available to that array are the following:&lt;/p&gt;

&lt;p&gt;
&lt;strong style=&quot;display:block;&quot;&gt;type&lt;/strong&gt;An internal CakePHP data type. The following map to the equivalent SQL types: string (VARCHAR), text (TEXT), integer (INT), float (FLOAT), datetime (DATETIME), timestamp (TIMESTAMP), time (TIME), date (DATE), binary (BLOB)
&lt;/p&gt;

&lt;p&gt;
&lt;strong style=&quot;display:block;&quot;&gt;key&lt;/strong&gt;Identifies the field as the primary key and sets it to auto increment.
&lt;/p&gt;

&lt;p&gt;
&lt;strong style=&quot;display:block;&quot;&gt;length&lt;/strong&gt;The length the field should take.
&lt;/p&gt;

&lt;p&gt;
&lt;strong style=&quot;display:block;&quot;&gt;null&lt;/strong&gt;True to allow nulls, false to disallow nulls.
&lt;/p&gt;

&lt;p&gt;
&lt;strong style=&quot;display:block;&quot;&gt;default&lt;/strong&gt;The default value for the field.
&lt;/p&gt;

&lt;p&gt;Our $fields property above uses these fields to mirror the schema that is in our database for the User model. The final step is to populate our fixtures with some data, and this is done with the $records property. Place it right below the $fields property:&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp	

&lt;p&gt;Alternatively you can use the $import property to import live data from the model:&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;h2&gt;Using CakePHP Test Fixtures&lt;/h2&gt;
&lt;p&gt;Since we are testing our User model, we will create our test in app/tests/cases/models. Call the file user.test.php and set it up like so:&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;Note that we are using &lt;code&gt;App::import&lt;/code&gt; at the top to include our model.&lt;/p&gt;
&lt;p&gt;The $fixtures property is how we utilize the fixture we created above. The $fixtures property takes an array of fixture names, each one prefixed with one of three values. These three values can be app, plugin, or core. You can probably take a stab at what these mean, but I will clarify just in case.&lt;/p&gt;
&lt;p&gt;The app prefix means our fixture represents an application model, something from our own application like our User model.&lt;/p&gt;
&lt;p&gt;The plugin prefix allows you to specify that it is a fixture for a plugin model and it uses a dot syntax to specify the plugin, something like plugin.myplugin.pizza.&lt;/p&gt;
&lt;p&gt;The core prefix signals it is a fixture for the core files that come with CakePHP.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;startCase&lt;/code&gt; method fires when the test case starts and within it we use the &lt;code&gt;ClassRegistry&lt;/code&gt; class to initialize a User model as a property of the test case. The &lt;code&gt;endCase&lt;/code&gt; method is used to flush the ClassRegistry of our initialized class at the very end of the test case.&lt;/p&gt; 

&lt;p&gt;Something to note, if your User model has relationships, like hasMany, you will need to include fixtures for those as well, even if you are not using them. So if a User model is using the $hasMany property to include Publication models, then you would need to create a &lt;code&gt;PublicationFixture&lt;/code&gt; in app/tests/fixtures and the $fixtures property of &lt;code&gt;UserTestCase&lt;/code&gt; would have to be updated to look like the following:&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;h2&gt;Writing Test Methods To Test The User model&lt;/h2&gt;
&lt;p&gt;Our &lt;code&gt;UserTestCase&lt;/code&gt; class is the spot to place our test methods. We will focus on testing weather or not our model validations are working. So let's look at our class definition for the User model to see what exactly we are testing:&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;As you can see we have a &lt;code&gt;unique&lt;/code&gt; validation rule on the email field in our User model validations. Seeing how Cake does a database look up of this field to see if it is unique or not, we better have some test data to use in the database. Fixtures to the rescue!&lt;/p&gt;

&lt;p&gt;The data we created in the $records property of our fixture will be used as our source of data to test against! So we can write our test to see if this validation is truly working. We simply write a test that attempts to create a user with the same email as the user we created in the $records property of &lt;code&gt;UserFixture&lt;/code&gt;. We want to verify that validation fails:&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;The above method of &lt;code&gt;UserTestCase&lt;/code&gt; gives a couple of hints about testing conventions. The first thing you should note is that all test methods must begin with the word test. This is how the test runner knows to run the method as a test.&lt;/p&gt;
&lt;p&gt;The last thing we do in a test method is run an assertion. Here we assert that the validation is false. For a complete list of assertions available, check out the &lt;a href=&quot;http://www.simpletest.org/en/first_test_tutorial.html&quot; target=&quot;_blank&quot;&gt;SimpleTest&lt;/a&gt; site.&lt;/p&gt;

&lt;p&gt;Keep writing those test methods until you are certain all of your validations and model methods are passing. If you really want to go nuts, try writing your tests before you write your actual model code. There is no need to do any cleanup (deleting test records) when you are done. Our fixtures will take care of their own cleanup.&lt;/p&gt;

&lt;h2&gt;Running CakePHP Tests&lt;/h2&gt;
&lt;p&gt;All tests are run from the test.php file that exists in the web root. If my application is installed at dev.myapp.com then the test runner is located at dev.myapp.com/test.php. Visit this URL and you are given a list of possible tests to run. We will be running the &quot;Test Cases&quot; from the App heading:&lt;/p&gt;

&lt;div class=&quot;post-image&quot;&gt;
	&lt;img src=&quot;/images/cake-available-tests.jpg&quot; alt=&quot;App test cases&quot; title=&quot;App test cases&quot; width=&quot;292&quot; height=&quot;99&quot; class=&quot;bordered&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;From there you will click the models/User link and see the following beacon of hope!&lt;/p&gt;
&lt;div class=&quot;post-image&quot;&gt;
	&lt;img src=&quot;/images/cake-tests-passed.jpg&quot; alt=&quot;passing tests&quot; title=&quot;passing tests&quot; width=&quot;522&quot; height=&quot;98&quot; class=&quot;bordered&quot; /&gt;
&lt;/div&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;There are a couple of other useful methods like &lt;code&gt;startTest&lt;/code&gt; and &lt;code&gt;endTest&lt;/code&gt; that are run at the start and end of each test method. They are passed the method being run so you can utilize them like so:&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;Keep experimenting and perfecting your testing process! CakePHP provides some awesome tools for automating testing. Be sure to download the complete files used in this introduction to testing models in CakePHP.&lt;/p&gt;

&lt;a class=&quot;button&quot; href=&quot;/downloads/modeltesting.zip&quot;&gt;Download Files&lt;/a&gt;
</content>
 </entry>
 
 <entry>
   <title>Skeleton CSS Framework: An Introduction</title>
   <link href="http://brianscaturro.com/2011/11/03/skeleton-css-framework-an-introduction.html"/>
   <updated>2011-11-03T00:00:00+01:00</updated>
   <id>http://brianscaturro.com.com/2011/11/03/skeleton-css-framework-an-introduction</id>
   <content type="html">&lt;p&gt;As I was writing my post on the &lt;a href=&quot;/2011/11/02/html5-and-the-document-outline.html&quot; target=&quot;_blank&quot;&gt;document outline&lt;/a&gt;, I quickly coded up a demo site to show off some of those new HTML5 features that would aid the cause.&lt;/p&gt;
&lt;p&gt;I couldn't very well have a demo site that was completely ugly could I? I decided to do a quick test of the &lt;a href=&quot;http://www.getskeleton.com&quot; target=&quot;_blank&quot;&gt;Skeleton&lt;/a&gt; CSS framework. What I found was a wonderfully responsive framework that is wonderfully easy to use.&lt;/p&gt;

&lt;div class=&quot;clearfix buttons&quot;&gt;
  &lt;a class=&quot;button&quot; href=&quot;/demos/argyle/&quot; target=&quot;_blank&quot;&gt;Demo Site&lt;/a&gt;
  &lt;a href=&quot;/demos/argyle/source.zip&quot; class=&quot;button&quot;&gt;Download Demo Source&lt;/a&gt;
&lt;/div&gt;

&lt;h2&gt;How To Use Skeleton CSS&lt;/h2&gt;
&lt;p&gt;Head over to &lt;a href=&quot;http://www.getskeleton.com&quot; target=&quot;_blank&quot;&gt;getskeleton.com&lt;/a&gt; and download this bad mamma jamma. The bare minimum you need to get off the ground are two files: base.css and skeleton.css.&lt;/p&gt;
&lt;p&gt;The base.css file includes a lot of helper classes and resets, while the skeleton.css file contains the grid and column styles.&lt;/p&gt;

&lt;p&gt;The layout.css file is meant to contain your own custom styles, and it has a couple of useful media queries to boot.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;/demos/argyle/&quot; target=&quot;_blank&quot;&gt;demo site&lt;/a&gt; was built utilizing the base.css file and skeleton.css file. To get rockin just include these two files in your document head before your own stylesheet:&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;Easy weasy right?&lt;/p&gt;

&lt;h2&gt;How Skeleton CSS Works&lt;/h2&gt;
&lt;p&gt;Contrary to a lot of responsive approaches, Skeleton does not use a fluid base - that is it is not in percentages. It adapts the popular 960 grid system, and then focuses on min and max widths via media queries.&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;At the core of Skeleton's grid is a sixteen column system. You start out with a class of &quot;container&quot; on your root element, and then make sure whatever columns and column offsets you are using add up to the total 16. At the core of the demo's layout is this:&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;Eleven plus five does in fact equal sixteen....simple right? Alternatively, if you wanted more padding on the left of the aside you could do the following:&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;Just make sure it all adds up. In case you are wondering, alpha and omega are pretty standard conventions that strip off margin from the first column and last column respectively.&lt;/p&gt;

&lt;h2&gt;What Makes Skeleton CSS Responsive?&lt;/h2&gt;
&lt;p&gt;Well you already saw the media queries used. Remember the key to the grid is the column class. Lets look at a couple column rules within the media queries:&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;And so on.... be sure to take a more in depth look at the source to see how it reacts at even smaller screen sizes.&lt;/p&gt;

&lt;h2&gt;Required HTML&lt;/h2&gt;

&lt;p&gt;As with any mobile optimized site, you should include the viewport meta in your document:&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;This of course lets you control the size of the viewport and the zoom properties as well.&lt;/p&gt;

&lt;h2&gt;Enhancing The Skeleton Base&lt;/h2&gt;

&lt;p&gt;One cool feature that is not included in the framework is a smooth resizing (go ahead and resize the window on the &lt;a href=&quot;/demos/argyle/&quot; target=&quot;_blank&quot;&gt;demo site&lt;/a&gt; to see what I mean). Normally you just see blocks shift abruptly as the screen size adjusts. It is fairly easy to remedy this with CSS3 transitions:&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;h2&gt;Last Thoughts&lt;/h2&gt;
&lt;p&gt;Skeleton provides a slew of other useful classes like &lt;code&gt;.button&lt;/code&gt;, &lt;code&gt;.remove-bottom, .add-bottom&lt;/code&gt; and &lt;code&gt;.tabs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Usual fare for responsive design is to use a polyfill like &lt;a href=&quot;https://github.com/scottjehl/Respond&quot; target=&quot;_blank&quot;&gt;respond.js&lt;/a&gt; to make your older browsers ( I'm lookin at you IE ) behave with media queries. I am not entirely convinced of the necessity of this, as Skeleton creator Dave Gamache puts it&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
There is a small hiccup though - older non-CSS3 browsers aren't going to respond to the media-queries and thus will be served the standard 960 grid even if they are resized. In the spirit of graceful degradation though, I'm going to let this be instead of trying to implement a JS solution.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Other than that, you can test the demo site in IE7+ and all modern browsers, and you should see a pretty nice experience on all fronts.&lt;/p&gt;

&lt;p&gt;Don't forget (Make sure you stretch this bad brotha):&lt;/p&gt;

&lt;div class=&quot;buttons clearfix&quot;&gt;
  &lt;a class=&quot;button&quot; href=&quot;/demos/argyle/&quot; target=&quot;_blank&quot;&gt;View the Demo Site&lt;/a&gt;
  &lt;a href=&quot;/demos/argyle/source.zip&quot; class=&quot;button&quot;&gt;Download Demo Source&lt;/a&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>HTML5 And The Document Outline</title>
   <link href="http://brianscaturro.com/2011/11/02/html5-and-the-document-outline.html"/>
   <updated>2011-11-02T00:00:00+01:00</updated>
   <id>http://brianscaturro.com.com/2011/11/02/html5-and-the-document-outline</id>
   <content type="html">&lt;p&gt;I am sure many of us so called web developers have at least caught a glimpse of Mark Pilgrim's ultra handy resource &lt;a href=&quot;http://www.diveintohtml5.info&quot;&gt;Dive Into HTML5&lt;/a&gt;. There are plenty of cool snippets and explanations, and ways to utilize the latest features and APIs.&lt;/p&gt;

&lt;p&gt;As I was reading through chapter 4: &lt;a href=&quot;http://diveintohtml5.info/semantics.html&quot;&gt;What Does It All Mean?&lt;/a&gt;, I was intrigued by the material on the document outline - something that is often overlooked. To get started, take a peak:&lt;/p&gt;

&lt;div class=&quot;buttons clearfix&quot;&gt;
  &lt;a target=&quot;_blank&quot; class=&quot;button&quot; href=&quot;/demos/argyle&quot;&gt;Demo Site&lt;/a&gt;
  &lt;a target=&quot;_blank&quot; class=&quot;button&quot; title=&quot;Document Outline of Demo Site&quot; href=&quot;http://gsnedders.html5.org/outliner/process.py?url=http%3A%2F%2Fwww.brianscaturro.com%2Fdemos%2Fargyle&quot;&gt;Demo Site Outline&lt;/a&gt;
&lt;/div&gt;

&lt;h2&gt;What Is The Document Outline?&lt;/h2&gt;
&lt;p&gt;The document outline is the structure of your HTML document. It is a means to visualize and navigate the hierarchy of it's contents, and this is exactly what screen readers use to help the visually impaired, and a well structured document doesn't hurt the search engines either.&lt;/p&gt;
&lt;p&gt;In the good 'ol rough and tumble days prior to HTML5, this hierarchy was established with our good friends in the h crew: h1 - h6. A typical outline might work out to something like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;H1 - Site title
    &lt;ol&gt;
       &lt;li&gt;H2 - Article Title
           &lt;ol&gt;
               &lt;li&gt;H3 - Article Sub Heading&lt;/li&gt;
           &lt;/ol&gt;
       &lt;/li&gt;
       &lt;li&gt;H2 - Another Article Title&lt;/li&gt;
    &lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Why Does The Document Outline Matter?&lt;/h2&gt;
&lt;p&gt;Since the outline is used to visualize the structure of the document, it comes in handy for those who can't see. Having a well structured document outline has huge benefits for people using screen readers, and it makes your content easier to navigate for search engines (which happen to be indexing HTML5 content as we speak). If you can make your site more accessible, why not do it?&lt;/p&gt;

&lt;h2&gt;The Document Outline Headache&lt;/h2&gt;
&lt;p&gt;That was it. You were stuck with h1 - h6 for the entire outline of the page. What is so bad about this? The big problem with this approach is it can become exceedingly difficult to manage the outline of your document when you have varying content coming from varying sources.&lt;/p&gt;

&lt;p&gt;My favorite widget or plugin for WordPress might use h4 tags or h3 tags depending on the author's intended use or arbitrary use of whatever h tag seems clever at the moment (Come on, we have all been guilty of this at some point).&lt;/p&gt; 

&lt;p&gt;Lets take two widgets that are on the same level in our layout, both placed neatly in our sidebar, one uses an h3, and the other uses and h4. This is how the outline will look:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;H1 - Site title
    &lt;ol&gt;
       &lt;li&gt;H2 - Article Title
           &lt;ol&gt;
               &lt;li&gt;H3 - Widget One Title
                   &lt;ol&gt;
                       &lt;li&gt;H4 - Widget Two Title&lt;/li&gt;
                   &lt;/ol&gt;
               &lt;/li&gt;
           &lt;/ol&gt;
       &lt;/li&gt;
       &lt;li&gt;H2 - Another Article Title&lt;/li&gt;
    &lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That hardly seems clever....&lt;/p&gt;

&lt;p&gt;Lets look at another common problem. It is a pretty common practice to use an h2 as a sub-heading or a tagline. You might have something like this in your markup:&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;This h2 you were using for a sub-heading/tagline is now taking up space in your outline! Any h3 below it will look like it belongs to your meaningless tagline!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;H1 - Invalid Username
    &lt;ol&gt;
       &lt;li&gt;H2 - It's a website on the internet
           &lt;ol&gt;
               &lt;li&gt;H3 - Article title&lt;/li&gt;
           &lt;/ol&gt;
       &lt;/li&gt;
    &lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Your document just got harder to make sense of!&lt;/p&gt;

&lt;h2&gt;Managing The Document Outline&lt;/h2&gt;

&lt;p&gt;The wonder child of the internet known as HTML5 comes to the rescue with it's sparkling new set of &lt;a target=&quot;_blank&quot; href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/elements.html#sectioning-content&quot;&gt;sectioning content elements&lt;/a&gt; and our new friend hgroup. How do these fellas help?&lt;/p&gt;

&lt;h3&gt;Sectioning Content&lt;/h3&gt;
&lt;p&gt;HTML5 defines four new elements that define the scope of headings and footers. These elements are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/sections.html#the-article-element&quot; target=&quot;_blank&quot;&gt;aside&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/sections.html#the-aside-element&quot; target=&quot;_blank&quot;&gt;article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/sections.html#the-nav-element&quot; target=&quot;_blank&quot;&gt;nav&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/sections.html#the-section-element&quot;&gt;section&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These elements define a whole new scope for heading elements. This totally eradicates the problem of varying content from disparate sources! Check this little bit out from the &lt;a href=&quot;http://www.brianscaturro.com/demos/argyle&quot; target=&quot;_blank&quot;&gt;demo page&lt;/a&gt;:&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;Holy crumb cakes! Two H1 tags? Surely this is internet blasphemy! Take a look at the &lt;a target=&quot;_blank&quot; href=&quot;http://gsnedders.html5.org/outliner/process.py?url=http%3A%2F%2Fwww.brianscaturro.com%2Fdemos%2Fargyle&quot;&gt;document outline&lt;/a&gt; and see just how wrong you are.&lt;/p&gt;
&lt;p&gt;Our new scope defining elements keep our outline intact! Modular content from a plugin or some theme function can generate it's content in its own sectioning element without worry.&lt;/p&gt;

&lt;p&gt;The answer to our sub-heading/tagline dilemma is simple. The hgroup tag:&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;Taking a peak at our &lt;a href=&quot;http://gsnedders.html5.org/outliner/process.py?url=http%3A%2F%2Fwww.brianscaturro.com%2Fdemos%2Fargyle&quot; target=&quot;_blank&quot;&gt;outline&lt;/a&gt;, you can see that hgroup prevents our h2 tagline from ever entering the picture.&lt;/p&gt;

&lt;h2&gt;Some Final Thoughts&lt;/h2&gt;
&lt;p&gt;This new found freedom with your headings and the new possibilities bring up a couple of considerations.&lt;/p&gt;

&lt;h3&gt;The nav Element&lt;/h3&gt;
&lt;p&gt;Many of us have been accustomed to something like ul id=&quot;nav&quot; or div id=&quot;menu&quot; in the past. The nav element is a new element that defines significant blocks of navigation on your site.&lt;/p&gt;
&lt;p&gt;You should notice the nav element is a sectioning element. Rather than have an untitled section, it might make sense to take control of this scope defining element so your navigation shows up in your outline:&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;h3&gt;Object Oriented CSS&lt;/h3&gt;
&lt;p&gt;Those of you who try to stick to the principles of OOCSS will likely try to follow the rule of &lt;a href=&quot;https://github.com/stubbornella/csslint/wiki/Disallow-qualified-headings&quot; target=&quot;_blank&quot;&gt;no qualified headings&lt;/a&gt;. Defining top level styles for h1 - h6 might not be as possible with this new way of doing things. The h1 is no longer defined in the same context every time, and aesthetically you might not want the h1 to appear the same way in every scenario.&lt;/p&gt;

&lt;p&gt;The document outline is something worth checking out regularly as you develop. Make sure your outlines make sense, it will have huge benefits in the long run for people using screen readers, and the big search engines are already indexing HTML5 content. Thanks to &lt;a href=&quot;http://gsnedders.html5.org/outliner/&quot;&gt;gsnedders.html5.org/outliner/&lt;/a&gt; for the excellent tool for testing the document outline.&lt;/p&gt;

&lt;div class=&quot;buttons clearfix&quot;&gt;
  &lt;a class=&quot;button&quot; target=&quot;_blank&quot; href=&quot;/demos/argyle&quot;&gt;Check Out the Demo Site&lt;/a&gt;
  &lt;a class=&quot;button&quot; href=&quot;http://www.brianscaturro.com/demos/argyle/source.zip&quot;&gt;Download Demo Source&lt;/a&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>JavaScript Inheritance</title>
   <link href="http://brianscaturro.com/2011/10/31/javascript-inheritance.html"/>
   <updated>2011-10-31T00:00:00+01:00</updated>
   <id>http://brianscaturro.com.com/2011/10/31/javascript-inheritance</id>
   <content type="html">&lt;p&gt;JavaScript inheritance is something that often confuses developers. It is especially confusing for people coming from a language that uses more traditional inheritance - that is something like Java, C#, etc..&lt;/p&gt;

&lt;h2&gt;JavaScript Classes&lt;/h2&gt;
&lt;p&gt;JavaScript uses something called the prototype chain to manage inheritance. An instance of a class inherits properties from the constructor function's prototype. Lets take a look at a typical example.&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;This has become idiomatic in JavaScript town. It works for creating classes and objects, and you can do tons of JavaScript coding with this pattern.&lt;/p&gt;

&lt;h2&gt;Sub-classing In JavaScript&lt;/h2&gt;
&lt;p&gt;Coders love reuse right? Sub-classing in JavaScript is just as important as it is in other languages. Most languages can get away with something like the following example from PHP:&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp  

&lt;p&gt;With this little gem we hope to get all the benefits of our Sandwich parent class. Things aren't so cut and dry in JavaScript. The key again is the prototype. If object A has a subclass B, then B.prototype = A.prototype and if you want to reuse the constructor of A, then B = A.prototype.constructor. Lets see an example of this that piggybacks off of our bird class above.&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;The most confusing part of this ordeal is the business around ctor function. This follows the standard &lt;a href=&quot;http://javascript.crockford.com/prototypal.html&quot;&gt;inherit function&lt;/a&gt; championed by Douglas Crockford (it is also the basis for the ECMAScript 5 Object.create method).&lt;/p&gt;

&lt;p&gt;The idea is to create an object that inherits from the prototype so the actual prototype of the parent class is never touched.&lt;/p&gt;

&lt;h2&gt;Putting It All Together&lt;/h2&gt;
&lt;p&gt;
  Now that we understand how this all works (right?) we can make our lives a little easier by wrapping it all up into some handy functions and methods to make our lives a little easier.&lt;/p&gt;
&lt;p&gt;The following works well, and it is the same inheritance mechanism used by &lt;a href=&quot;http://documentcloud.github.com/backbone/&quot;&gt;Backbone.js&lt;/a&gt;
&lt;/p&gt;

Liquid error: No such file or directory - posix_spawnp

&lt;p&gt;Inheritance and sub-classing are important tools for maintaining and reusing code. JavaScript may have its own way of doing things, but after playing with it for a while, you will come to love it for the extremely expressive and functional language that it is.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Finally.....</title>
   <link href="http://brianscaturro.com/2011/10/29/finally.html"/>
   <updated>2011-10-29T00:00:00+02:00</updated>
   <id>http://brianscaturro.com.com/2011/10/29/finally</id>
   <content type="html">&lt;p&gt;Well....after making a living as a web developer for several years, I am finally doing the common sense thing and maintaining a blog. There is just so much to learn, and therefore so much to document!&lt;/p&gt;

&lt;p&gt;Having a blog just seems like a great place to write down my thoughts and explorations (those of you that have been doing this for years, please keep your &quot;duhs&quot; to yourselves).&lt;/p&gt;

&lt;p&gt;It is my hope that this blog will serve to reinforce the things I have spent so much time learning, and also help others learn from my discoveries.&lt;/p&gt;

&lt;p&gt;I hope to share my various conquests and humiliations on the intarwebz - that is my ongoing love affair with HTML, CSS, and JavaScript. Let's not forget the server side languages and the slew of frameworks and systems that accompany them. I hope this will be a worthwhile journey for all involved..&lt;/p&gt;

&lt;p&gt;I am sure there is much left undone before I set out on this journey, but here I go....&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
